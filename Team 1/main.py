"""
Target Problem:
---------------
* A classifier for the predicting the evolution of brain connectivity over time.

Proposed Solution (Machine Learning Pipeline):
----------------------------------------------
* Local Outlier Factor -> CustomMultiOutputBayesianRidge

Input to Proposed Solution:
---------------------------
* Directories of training and testing data in csv file format
* These two types of data should be stored in n x m pattern in csv file format.
  Typical Example:
  ----------------
  n x m samples in training csv file (n number of samples, m - 1 number of features)
  n x m samples in testing csv file (n number of samples, m - 1 number of features)
* These data set files are ready by load_data() function.
* For comprehensive information about input format, please check the section
  "Data Sets and Usage Format of Source Codes" in README.md file on github.

Output of Proposed Solution:
----------------------------
* Predictions generated by learning model for testing set
* They are stored in "predictions.csv" file.

Code Owner:
-----------
* Copyright © Team 150180704_150190708_ 150180730_150140009_ 150160067 All rights reserved.
* Copyright © Istanbul Technical University, Learning From Data Fall 2020. All rights reserved. """

import csv
import numpy as np
import pandas as pd
from sklearn.neighbors import LocalOutlierFactor
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import BayesianRidge
from sklearn.base import BaseEstimator, RegressorMixin
from sklearn.metrics import mean_squared_error as mse

import random as r
r.seed(1)

def load_data(csvname):
    """
        Loads data in the given csvname and returns data as numpy array 
    Parameters
    ----------
    csvname: file path of desired data
    """
    data_df = np.asarray(pd.read_csv(csvname))[:,1:]
    return data_df

def write_output(filename,predictions):
    """
        Writes predictions as desired in the submission process
    Parameters
    ----------
    filename: file path for saving file
    predictions: predictions after testing
    """
    with open(filename, mode='w') as output_file:
        output_writer = csv.writer(output_file, delimiter=',')
        output_writer.writerow(["ID", "Predicted"])

        for i in range(len(predictions)):
            output_writer.writerow([i, predictions[i]])

class CustomMultiOutputBayesianRidge(BaseEstimator, RegressorMixin):
    """
        This Regressor is extended version of BayesianRidge,
        For each feature it creates seperate model via fit function,
        For each feature it predicts output values via predict function and saved models
        This class gets arguments of BayesianRidge
    """    
    def __init__(self,alpha_1= 1e-06,alpha_2= 1e-06,alpha_init= None,compute_score= False,copy_X= True,fit_intercept= True,lambda_1= 1e-06,lambda_2= 1e-06,lambda_init= None,n_iter= 300,normalize= False,tol= 0.001,verbose= False):    
        self.alpha_1 = alpha_1
        self.alpha_2 = alpha_2
        self.alpha_init = alpha_init
        self.compute_score = compute_score
        self.copy_X = copy_X
        self.fit_intercept = fit_intercept
        self.lambda_1 = lambda_1
        self.lambda_2 = lambda_2
        self.lambda_init = lambda_init
        self.n_iter = n_iter
        self.normalize = normalize
        self.tol = tol
        self.verbose = verbose
        
    def fit(self, X, y):
        
        """
        A list of learning model is trained for each feature by using train data set.
        Bayesian Ridge Regressor is preferred.
        
        Parameters
        ----------
        X: train dataset with k features
        y: output of X dataset for each features(k feature)
        """
        
        self.model = []
        for i in range(y.shape[1]):
            self.model.append(BayesianRidge(alpha_1=self.alpha_1,alpha_2= self.alpha_2,alpha_init= self.alpha_init,compute_score= self.compute_score,copy_X= self.copy_X,fit_intercept= self.fit_intercept,lambda_1= self.lambda_1,lambda_2=self.lambda_2,lambda_init= self.lambda_init,n_iter= self.n_iter,normalize= self.normalize,tol= self.tol,verbose= self.verbose).fit(np.transpose(np.array([X[:,i]])),y[:,i]))
        return self
    
    def predict(self, X):
        
        """
            Predicts given X dataset with k features. 
            For each feature different model is used trained with fit.
            
        Parameters
        ----------
        X: test dataset with k features
        """
        
        y_test = np.zeros((X.shape[0],len(self.model)))
        for i in range(len(self.model)):
            y_test[:,i] = self.model[i].predict(np.transpose(np.array([X[:,i]]))) 
        return y_test

def test(model,X, y):
    """
        Predicts given X dataset with given model 
        Returns mse score between predicted output and ground truth output
        
    Parameters
    ----------
    X: Test dataset with k features
    y: Ground truth of X with k features
    """

    return mse(model.predict(X).flatten(),y.flatten())

def remove_outliers(X_train,y_train):

    """
        This function deletes outliers on the given numpy arrays,
        and returns clean version of them.
            
        Parameters
        ----------
        X_train: dataset to remove outliers with k features 
        y_train: dataset to remove outliers with k features 
    """

    clf = LocalOutlierFactor(n_neighbors=2)
    out1 = clf.fit_predict(X_train)
    out2 = clf.fit_predict(y_train)
    indexes = np.argwhere(out1+out2 != 2)
    X_train = np.delete(X_train,indexes,axis=0)
    y_train = np.delete(y_train,indexes,axis=0)
    return X_train,y_train

def train_5foldcv(X_train,y_train):
    """
        This function trains model with given X_train and y_train
            
        Parameters
        ----------
        X_train: input dataset
        y_train: output dataset
    """

    reg = CustomMultiOutputBayesianRidge(alpha_2=7,lambda_2=1.6,alpha_init=0.5,lambda_init=0.1,n_iter=10,normalize=True)

    """
        This dictionary is used for easy parameter estimation,
        The optimal parameters are calculated using this dictionary.
    """
    param_grid = {
    #        'clf__alpha_1':np.arange(1,6,0.5),
    #        'clf__gamma': [0.0001,0.001,0.01,0.1,1],
    #        'clf__tol':[0.0001,0.001,0.01,0.1,1],
    #        'clf__alpha_1':[0.000001, 0.00001,0.0001,0.001,0.01,0.1,1],
    #        'clf__alpha_2':[0.000001, 0.00001,0.0001,0.001,0.01,0.1,1],
    #        'clf__lambda_1':[0.000001, 0.00001,0.0001,0.001,0.01,0.1,1],
    }

    model = GridSearchCV(reg, param_grid,cv=5,scoring=test,return_train_score=True)
    model.fit(X_train, y_train)
    return model
    


X_train = load_data('train_t0.csv')
y_train = load_data('train_t1.csv')
X_test = load_data('test_t0.csv')
#y_test = load_data('test_t1.csv') #If you have y_test you can uncommment

X_train,y_train = remove_outliers(X_train,y_train)

model = train_5foldcv(X_train,y_train)

print("5-Fold Cross Validation MSE ",model.best_score_)

# print("MSE of X_test -> ",test(model,X_test,y_test)) #If you have y_test you can uncommment

write_output('predictions.csv',model.predict(X_test).flatten())
print("...")
print("Predicted file for X_test is written to the predictions.csv file")

